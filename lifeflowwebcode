# LifeFlow - Life Management Application

# Backend Setup
from flask import Flask, request, jsonify
from flask_jwt_extended import JWTManager, create_access_token
from flask_cors import CORS
from pymongo import MongoClient
import os
from datetime import datetime, timedelta

# Initialize Flask app
app = Flask(__name__)
CORS(app)

# Configure JWT
app.config['JWT_SECRET_KEY'] = os.environ.get('JWT_SECRET_KEY', 'your-secret-key')
jwt = JWTManager(app)

# Database setup
client = MongoClient(os.environ.get('MONGODB_URI', 'mongodb://localhost:27017/'))
db = client.lifeflow

# User routes
@app.route('/api/auth/register', methods=['POST'])
def register():
    data = request.get_json()
    if db.users.find_one({'email': data['email']}):
        return jsonify({'error': 'Email already exists'}), 400
    
    user_id = db.users.insert_one({
        'email': data['email'],
        'password': data['password'],  # Should be hashed in production
        'created_at': datetime.utcnow()
    }).inserted_id
    
    return jsonify({'message': 'User created successfully'}), 201

@app.route('/api/auth/login', methods=['POST'])
def login():
    data = request.get_json()
    user = db.users.find_one({'email': data['email'], 'password': data['password']})
    if not user:
        return jsonify({'error': 'Invalid credentials'}), 401
    
    access_token = create_access_token(identity=str(user['_id']))
    return jsonify({'token': access_token}), 200

# Task routes
@app.route('/api/tasks', methods=['GET', 'POST'])
def handle_tasks():
    if request.method == 'GET':
        tasks = list(db.tasks.find())
        return jsonify(tasks), 200
    
    if request.method == 'POST':
        task = request.get_json()
        task_id = db.tasks.insert_one(task).inserted_id
        return jsonify({'task_id': str(task_id)}), 201

# Calendar routes
@app.route('/api/calendar/events', methods=['GET', 'POST'])
def handle_calendar():
    if request.method == 'GET':
        events = list(db.events.find())
        return jsonify(events), 200
    
    if request.method == 'POST':
        event = request.get_json()
        event_id = db.events.insert_one(event).inserted_id
        return jsonify({'event_id': str(event_id)}), 201

# Health tracking routes
@app.route('/api/health/metrics', methods=['GET', 'POST'])
def handle_health_metrics():
    if request.method == 'GET':
        metrics = list(db.health_metrics.find())
        return jsonify(metrics), 200
    
    if request.method == 'POST':
        metric = request.get_json()
        metric_id = db.health_metrics.insert_one(metric).inserted_id
        return jsonify({'metric_id': str(metric_id)}), 201

# Financial tracking routes
@app.route('/api/finances', methods=['GET', 'POST'])
def handle_finances():
    if request.method == 'GET':
        transactions = list(db.transactions.find())
        return jsonify(transactions), 200
    
    if request.method == 'POST':
        transaction = request.get_json()
        transaction_id = db.transactions.insert_one(transaction).inserted_id
        return jsonify({'transaction_id': str(transaction_id)}), 201

if __name__ == '__main__':
    app.run(debug=True)
